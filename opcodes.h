#define op(n, cc, instr, ...) case n: dprintf("pc: %.4X -> %s %s", *REG_PC, #instr, #__VA_ARGS__); {instr(__VA_ARGS__);} cpu_cycles += cc; break

//flags
#define RESET_FLAGS *(REG_F.value) = 0
#define flag(f) ((REG_F).flags->f)
#define fzero(a) flag(z) = (a) == 0 //set if a is 0
#define fhalfcarry8(a,b) flag(h) = (((((a) & 0xF) + ((b) & 0xF)) & 0x10) == 0x10 ) //carry from bit 3 to bit 4
#define fhalfcarry16(a,b) flag(h) = (((((a) & 0xFFF) + ((b) & 0xFFF)) & 0x1000) == 0x1000 ) //carry from bit 11 to bit 12
#define fcarry(a,b) flag(c) = ((a)+(b)) > 0xFF //carry
#define fhalfborrow(a,b) flag(h) = (((a) - (b)) & 0xF) > ((a) & 0xF)
#define fborrow(a,b) flag(c) = a < b

//immediate values and other..
#define d8  mem_get_ptr((*REG_PC)++)
#define d16 (uint16_t*)d8
#define a16 mem_get_ptr(*d16)
#define AT(reg) mem_get_ptr(*(reg))

//INSTructions
#define NOP()
#define STOP() cpu_stopped = 1
#define LD(a,b) *(a) = *(b)
#define INC_16(a) (*(a))++
#define INC_8(a) fzero((*(a))++); flag(n) = 0; fhalfcarry8(*(a), *(a)-1)
#define DEC_16(a) (*(a))--
#define DEC_8(a) fzero((*(a))--); flag(n) = 1; fhalfcarry8(*(a), *(a)+1)
#define RLC(a) RESET_FLAGS; uint8_t bit7 = !!(*(a) & 0x80); fzero( (*(a)) = ((*(a)) << 1) | bit7 ); flag(c) = bit7
#define RL(a) RESET_FLAGS; uint8_t c = flag(c); flag(c) = !!((*(a)) && 0x80); fzero( (*(a)) = (((*(a)) << 1) | c ) );
#define RRC(a) RESET_FLAGS; uint8_t bit0 = !!(*(a) & 0x01); fzero( (*(a)) = ((*(a)) >> 1) | bit0 ); flag(c) = bit0
#define RR(a) RESET_FLAGS; uint8_t c = flag(c); flag(c) = !!((*(a)) && 0x01); fzero( (*(a)) = (((*(a)) >> 1) | (c << 7) ) );
#define ADD_16(a,b) fcarry((*a), *(b)); fhalfcarry16(*(a), *(b)); (*(a)) += (*(b)); flag(n) = 0
#define ADD_8(a,b) fcarry((*a), *(b)); fhalfcarry8(*(a), *(b)); flag(n) = 0; fzero(*(a))
#define JR() *REG_PC += (int8_t)mem_read(*REG_PC)+1
#define JR_nf(f) if (!flag(f)) {JR();}
#define JR_f(f) if (flag(f)) {JR();}
inline void DAA(void) {
	//TODO DADADADAaa
}
#define LD_A_ATHL(sign) LD(REG_A, AT(REG_HL)); *REG_HL = sign 1
#define LD_ATHL_A(sign) LD(AT(REG_HL), REG_A); *REG_HL = sign 1
#define CPL() flag(n) = flag(h) = 1; *REG_A = ~*REG_A
#define SCF() flag(n) = flag(h) = 0; flag(c) = 1
#define CCF() flag(n) = flag(h) = 0; flag(c) = ~flag(c)
#define HALT() cpu_halted = 1
#define ADC(a) uint8_t n = *(a)+flag(c); ADD_8(REG_A, &n)
#define SUB(a) fhalfborrow(*REG_A, *(a)); fborrow(*REG_A, *(a)); flag(n) = 1; fzero(*REG_A -= *(a))
#define SBC(a) uint8_t n = *(a)+flag(c); SUB(&n)
#define AND(a) flag(c) = flag(n) = 0; flag(h) = 1; fzero(*REG_A &= *(a))
#define XOR(a) RESET_FLAGS; fzero(*REG_A ^= *(a))
#define OR(a) RESET_FLAGS; fzero(*REG_A |= *(a))
#define CP(a) flag(n) = 1; fhalfborrow(*REG_A, *(a)); fborrow(*REG_A, *(a)); fzero(*REG_A - *(a))

//OPCODES decoding
op(0x00, 4,  NOP);
op(0x01, 12, LD, REG_BC, d16);
op(0x02, 8,  LD, AT(REG_BC), REG_A);
op(0x03, 8,  INC_16, REG_BC);
op(0x04, 4,  INC_8, REG_B);
op(0x05, 4,  DEC_8, REG_B);	
op(0x06, 8,  LD, REG_B, d8);
op(0x07, 4,  RLC, REG_A);
op(0x08, 20, LD, a16, REG_SP);
op(0x09, 8,  ADD_16, REG_HL, REG_BC);
op(0x0A, 8,  LD, REG_A, AT(REG_BC));
op(0x0B, 8,  DEC_16, REG_BC);
op(0x0C, 4,  INC_8, REG_C);
op(0x0D, 4,  DEC_8, REG_C);
op(0x0E, 8,  LD, REG_C, d8);
op(0x0F, 4,  RRC, REG_A);
op(0x10, 4,  STOP);
op(0x11, 12, LD, REG_DE, d16);
op(0x12, 8,  LD, AT(REG_DE), REG_A);
op(0x13, 8,  INC_16, REG_DE);
op(0x14, 4,  INC_8, REG_D);
op(0x15, 4,  DEC_8, REG_D);
op(0x16, 8,  LD, REG_D, d8);
op(0x17, 4,  RL, REG_A);
op(0x18, 12, JR);
op(0x19, 8,  ADD_16, REG_HL, REG_DE);
op(0x1A, 8,  LD, REG_A, AT(REG_DE));
op(0x1B, 8,  DEC_16, REG_DE);
op(0x1C, 4,  INC_8, REG_E);
op(0x1D, 4,  DEC_8, REG_E);
op(0x1E, 8,  LD, REG_E, d8);
op(0x1F, 4,  RR, REG_A);
op(0x20, 8,  JR_nf, z);
op(0x21, 12, LD, REG_HL, d16);
op(0x22, 8,  LD_ATHL_A, +);
op(0x23, 8,  INC_16, REG_HL);
op(0x24, 4,  INC_8, REG_H);
op(0x25, 4,  DEC_8, REG_H);
op(0x26, 8,  LD, REG_H, d8);
op(0x27, 4,  DAA);
op(0x28, 8,  JR_f, z);
op(0x29, 8,  ADD_16, REG_HL, REG_HL);
op(0x2A, 8,  LD_A_ATHL, +);
op(0x2B, 8,  DEC_16, REG_HL);
op(0x2C, 4,  INC_8, REG_L);
op(0x2D, 4,  DEC_8, REG_L);
op(0x2E, 8,  LD, REG_L, d8);
op(0x2F, 4,  CPL);
op(0x30, 8,  JR_nf, c);
op(0x31, 12, LD, REG_SP, d16);
op(0x32, 8,  LD_ATHL_A, -);
op(0x33, 8,  INC_16, REG_SP);
op(0x34, 12, INC_8, AT(REG_HL));
op(0x35, 12, DEC_8, AT(REG_HL));
op(0x36, 12, LD, AT(REG_HL), d8);
op(0x37, 4,  SCF);
op(0x38, 8,  JR_f, c);
op(0x39, 8,  ADD_16, REG_HL, REG_SP);
op(0x3A, 8,  LD_A_ATHL, -);
op(0x3B, 8,  DEC_16, REG_SP);
op(0x3C, 4,  INC_8, REG_A);
op(0x3D, 4,  DEC_8, REG_A);
op(0x3E, 8,  LD, REG_A, d8);
op(0x3F, 4,  CCF);
//generated by gen_lds.lua
op(0x40, 4, LD, REG_B, REG_B);
op(0x41, 4, LD, REG_B, REG_C);
op(0x42, 4, LD, REG_B, REG_D);
op(0x43, 4, LD, REG_B, REG_E);
op(0x44, 4, LD, REG_B, REG_H);
op(0x45, 4, LD, REG_B, REG_L);
op(0x46, 8, LD, REG_B, AT(REG_HL));
op(0x47, 4, LD, REG_B, REG_A);
op(0x48, 4, LD, REG_C, REG_B);
op(0x49, 4, LD, REG_C, REG_C);
op(0x4A, 4, LD, REG_C, REG_D);
op(0x4B, 4, LD, REG_C, REG_E);
op(0x4C, 4, LD, REG_C, REG_H);
op(0x4D, 4, LD, REG_C, REG_L);
op(0x4E, 8, LD, REG_C, AT(REG_HL));
op(0x4F, 4, LD, REG_C, REG_A);
op(0x50, 4, LD, REG_D, REG_B);
op(0x51, 4, LD, REG_D, REG_C);
op(0x52, 4, LD, REG_D, REG_D);
op(0x53, 4, LD, REG_D, REG_E);
op(0x54, 4, LD, REG_D, REG_H);
op(0x55, 4, LD, REG_D, REG_L);
op(0x56, 8, LD, REG_D, AT(REG_HL));
op(0x57, 4, LD, REG_D, REG_A);
op(0x58, 4, LD, REG_E, REG_B);
op(0x59, 4, LD, REG_E, REG_C);
op(0x5A, 4, LD, REG_E, REG_D);
op(0x5B, 4, LD, REG_E, REG_E);
op(0x5C, 4, LD, REG_E, REG_H);
op(0x5D, 4, LD, REG_E, REG_L);
op(0x5E, 8, LD, REG_E, AT(REG_HL));
op(0x5F, 4, LD, REG_E, REG_A);
op(0x60, 4, LD, REG_H, REG_B);
op(0x61, 4, LD, REG_H, REG_C);
op(0x62, 4, LD, REG_H, REG_D);
op(0x63, 4, LD, REG_H, REG_E);
op(0x64, 4, LD, REG_H, REG_H);
op(0x65, 4, LD, REG_H, REG_L);
op(0x66, 8, LD, REG_H, AT(REG_HL));
op(0x67, 4, LD, REG_H, REG_A);
op(0x68, 4, LD, REG_L, REG_B);
op(0x69, 4, LD, REG_L, REG_C);
op(0x6A, 4, LD, REG_L, REG_D);
op(0x6B, 4, LD, REG_L, REG_E);
op(0x6C, 4, LD, REG_L, REG_H);
op(0x6D, 4, LD, REG_L, REG_L);
op(0x6E, 8, LD, REG_L, AT(REG_HL));
op(0x6F, 4, LD, REG_L, REG_A);
op(0x70, 8, LD, AT(REG_HL), REG_B);
op(0x71, 8, LD, AT(REG_HL), REG_C);
op(0x72, 8, LD, AT(REG_HL), REG_D);
op(0x73, 8, LD, AT(REG_HL), REG_E);
op(0x74, 8, LD, AT(REG_HL), REG_H);
op(0x75, 8, LD, AT(REG_HL), REG_L);
op(0x76, 4, HALT);
op(0x77, 8, LD, AT(REG_HL), REG_A);
op(0x78, 4, LD, REG_A, REG_B);
op(0x79, 4, LD, REG_A, REG_C);
op(0x7A, 4, LD, REG_A, REG_D);
op(0x7B, 4, LD, REG_A, REG_E);
op(0x7C, 4, LD, REG_A, REG_H);
op(0x7D, 4, LD, REG_A, REG_L);
op(0x7E, 8, LD, REG_A, AT(REG_HL));
op(0x7F, 4, LD, REG_A, REG_A);
//generated by gen_maths.lua
op(0x80, 4, ADD_8, REG_A, REG_B);
op(0x81, 4, ADD_8, REG_A, REG_C);
op(0x82, 4, ADD_8, REG_A, REG_D);
op(0x83, 4, ADD_8, REG_A, REG_E);
op(0x84, 4, ADD_8, REG_A, REG_H);
op(0x85, 4, ADD_8, REG_A, REG_L);
op(0x86, 8, ADD_8, REG_A, AT(REG_HL));
op(0x87, 4, ADD_8, REG_A, REG_A);
op(0x88, 4, ADC, REG_B);
op(0x89, 4, ADC, REG_C);
op(0x8A, 4, ADC, REG_D);
op(0x8B, 4, ADC, REG_E);
op(0x8C, 4, ADC, REG_H);
op(0x8D, 4, ADC, REG_L);
op(0x8E, 8, ADC, AT(REG_HL));
op(0x8F, 4, ADC, REG_A);
op(0x90, 4, SUB, REG_B);
op(0x91, 4, SUB, REG_C);
op(0x92, 4, SUB, REG_D);
op(0x93, 4, SUB, REG_E);
op(0x94, 4, SUB, REG_H);
op(0x95, 4, SUB, REG_L);
op(0x96, 8, SUB, AT(REG_HL));
op(0x97, 4, SUB, REG_A);
op(0x98, 4, SBC, REG_B);
op(0x99, 4, SBC, REG_C);
op(0x9A, 4, SBC, REG_D);
op(0x9B, 4, SBC, REG_E);
op(0x9C, 4, SBC, REG_H);
op(0x9D, 4, SBC, REG_L);
op(0x9E, 8, SBC, AT(REG_HL));
op(0x9F, 4, SBC, REG_A);
op(0xA0, 4, AND, REG_B);
op(0xA1, 4, AND, REG_C);
op(0xA2, 4, AND, REG_D);
op(0xA3, 4, AND, REG_E);
op(0xA4, 4, AND, REG_H);
op(0xA5, 4, AND, REG_L);
op(0xA6, 8, AND, AT(REG_HL));
op(0xA7, 4, AND, REG_A);
op(0xA8, 4, XOR, REG_B);
op(0xA9, 4, XOR, REG_C);
op(0xAA, 4, XOR, REG_D);
op(0xAB, 4, XOR, REG_E);
op(0xAC, 4, XOR, REG_H);
op(0xAD, 4, XOR, REG_L);
op(0xAE, 8, XOR, AT(REG_HL));
op(0xAF, 4, XOR, REG_A);
op(0xB0, 4, OR, REG_B);
op(0xB1, 4, OR, REG_C);
op(0xB2, 4, OR, REG_D);
op(0xB3, 4, OR, REG_E);
op(0xB4, 4, OR, REG_H);
op(0xB5, 4, OR, REG_L);
op(0xB6, 8, OR, AT(REG_HL));
op(0xB7, 4, OR, REG_A);
op(0xB8, 4, CP, REG_B);
op(0xB9, 4, CP, REG_C);
op(0xBA, 4, CP, REG_D);
op(0xBB, 4, CP, REG_E);
op(0xBC, 4, CP, REG_H);
op(0xBD, 4, CP, REG_L);
op(0xBE, 8, CP, AT(REG_HL));
op(0xBF, 4, CP, REG_A);
